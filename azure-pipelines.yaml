name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'KNOWN_HOSTS_STRING'
        sshPublicKey: 'PUBLIC_KEY'
        sshKeySecureFile: 'id_rsa'
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    - task: TerraformCLI@0
      inputs:
        command: 'init'
        workingDirectory: 'environments/test'
        backendType: 'azurerm'
        backendServiceArm: 'Free Trial (5171e8cd-4499-4fbb-acc7-d5a5d93c16dd)'
        backendAzureRmResourceGroupName: 'tstate'
        backendAzureRmContainerName: 'tstate'
        allowTelemetryCollection: true
    - task: TerraformCLI@0
      inputs:
        command: 'validate'
        allowTelemetryCollection: true
    - task: TerraformCLI@0
      inputs:
        command: 'plan'
        environmentServiceName: 'Free Trial (5171e8cd-4499-4fbb-acc7-d5a5d93c16dd)'
        allowTelemetryCollection: true
    - task: TerraformCLI@0
      inputs:
        command: 'apply'
        environmentServiceName: 'Free Trial (5171e8cd-4499-4fbb-acc7-d5a5d93c16dd)'
        allowTelemetryCollection: true
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run StarterAPIs.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    - task: PublishTestResults@2
      displayName: 'Publish Test Result Postman -  Regression test suite and Data Validation test suite'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'ResultsjunitReport.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: 'Postman Results'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi    
- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Free Trial (5171e8cd-4499-4fbb-acc7-d5a5d93c16dd)'
              appName: 'fakerestapi'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    displayName: NAME
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
      tags: 'VM'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                echo "Chromium-Browser Installed"
                pip3 install selenium
                echo "Selenium Installed"
                sudo rm -rf chromedriver*
                wget "https://chromedriver.storage.googleapis.com/83.0.4103.39/chromedriver_linux64.zip"
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '*chromedriver_linux64.zip'
              destinationFolder: ''
              cleanDestinationFolder: true
              overwriteExistingFiles: true
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo cp chromedriver /usr/bin
                echo "Done Copying chromedriver to /usr/bin"
          # Run Selelium Test
          - task: Bash@3
            displayName: 'The Selenium Test Test'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
              
                cd /home/casita/automatedtesting/selenium/
                python3 /home/casita/automatedtesting/selenium/login.py